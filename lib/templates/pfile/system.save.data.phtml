<?php
	/******************************************************************
	 system.save.data.phtml                                Muze Ariadne
	 ------------------------------------------------------------------
 
	******************************************************************/

	require_once($this->store->get_config('code')."modules/mod_page.php");

	if ((($this->arIsNewObject &&
			($parentobj=current($this->get($this->parent, "system.get.phtml"))) &&
			$parentobj->CheckLogin("add", $this->type)) ||
			(!$this->arIsNewObject && $this->CheckLogin("edit"))) &&
			$this->CheckConfig()) {
		if ($this->arIsNewObject) {
			$this->data=new baseObject;
		} else {
			// first make sure that the object is clean (data can only be set via 
			// the defined interface: $arCallArgs)
			$this->data=current($this->get(".","system.get.data.phtml"));
		}

		$this->error = null;

		// unset the properties array, so no properties can be passed to this template.
		$properties = array();

		if (!$this->getdata("name", $ARConfig->nls->default)) { // default language for this path
			$this->error = ar::error( sprintf($ARnls["err:nodatafordefaultlanguage"],$AR->nls->list[$ARConfig->nls->default]), 101);
		} else {
			if (!$this->data->nls) {
				$this->data->nls=new baseObject;
			}
			$this->data->nls->default=$ARConfig->nls->default;
			reset($AR->nls->list);
			$count=0;
			$nlslist = array();
			while (list($key, $value)=each($AR->nls->list)) {
				if ($this->getdata("name",$key)) {
					array_push($nlslist, $key);
					if (!$this->data->$key) {
						$newnlsdata=new baseObject;
					} else {
						$newnlsdata=$this->data->$key;
					}
					$newnlsdata->name=$this->getdata("name",$key);
					$properties["name"][$count]["value"]=$newnlsdata->name;
					$properties["name"][$count]["nls"]=$key;
					$properties["text"][$count]["value"]=$newnlsdata->name;
					$properties["text"][$count]["nls"]=$key;
 					$count++;
					$newnlsdata->summary=page::compile($this->getdata("summary",$key), $key);
					$properties["text"][$count]["value"]=substr($newnlsdata->summary,0,255);
					$properties["text"][$count]["nls"]=$key;
					$count++;
					if ($this->store->is_supported("fulltext")) {
						$properties["fulltext"][$count]["value"]=$this->store->format_for_fti(
								$newnlsdata->name." ".
								$this->html_to_text($newnlsdata->summary)." "
								);
						$properties["fulltext"][$count]["nls"]=$key;
					}
					$this->data->$key=$newnlsdata;
					$this->data->nls->list[$key]=$value;
				} else { // clear language values for $key->name if set, keep the rest, just in case.
					if ($this->data->$key) {
						unset($this->data->$key->name);
						unset($this->data->nls->list[$key]);
					}
				}
			}
		}

		if (!$this->error) {
			$this->save($properties);

			if (!$this->error) {
				// keep only the fulltext properties.
				$properties = array('fulltext' => $properties['fulltext']);

				$this->arIsNewObject = false;

				$tempfile = $this->getdata("file_temp");
				$mimetype = $this->getdata("mimetype");
				$file_type = $this->getdata("file_type");
				$file_size = $this->getdata("file_size");

				if (!$mimetype) {
					$mimetype = $file_type;
				}

				if ($mimetype){
					$armime = explode("/", $mimetype);

					$this->data->mimetype = $mimetype;
					$this->data->mime["type"] = $armime[0];
					$this->data->mime["subtype"] = $armime[1];

					$properties["mimetype"][] = array(
						"type"    => $armime[0],
						"subtype" => $armime[1],
					);

					$this->data->mimetype = $mimetype;
					$this->data->mime["type"] = $armime[0];
					$this->data->mime["subtype"] = $armime[1];
				}

				// now check whether $file_temp is defined, if so, move it
				if (!$this->error) {
					if ($tempfile) {
						$tempfile=preg_replace("|[\\\/]|","",$tempfile); // make sure nobody gets /etc/passwd
						$tempfile=$this->store->get_config("files")."temp/".$tempfile;

						if (file_exists($tempfile)) {
							$files = $this->store->get_filestore("files");

							$files->copy_to_store($tempfile, $this->id);
							$this->data->filesize = $file_size;
							@unlink($tempfile);
						}
					}
				} else {
					debug("err: $this->error","all");
					break;
				}
				if (!$this->error) {
					$arResult = $this->save($properties);
				}

				global $cache_config;
				$cachestore=new cache($cache_config);
				$cachestore->onObjectSaved($this->id);
			}
		}
	}
?>
